#!/usr/bin/env python3
"""
üé¨ Video Subtitle Generator - GUI Version
Giao di·ªán ƒë·ªì h·ªça ho√†n to√†n cho MacBook Pro M2
"""

import os
import sys
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
import subprocess
from pathlib import Path

class SubtitleGeneratorGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üé¨ Video Subtitle Generator - M2 Optimized")
        self.root.geometry("700x600")
        self.root.resizable(True, True)
        
        # Bi·∫øn l∆∞u tr·ªØ
        self.folder_path = tk.StringVar()
        self.selected_lang = tk.StringVar(value="vi")
        self.selected_model = tk.StringVar(value="medium")
        self.workers_count = tk.IntVar(value=2)
        
        # Kh·ªüi t·∫°o process
        self.process = None
        self.processing_thread = None
        
        self.setup_ui()
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        # Main frame
        main_frame = tk.Frame(self.root, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = tk.Label(main_frame, text="üé¨ Video Subtitle Generator", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 20))
        
        subtitle_label = tk.Label(main_frame, text="MacBook Pro M2 Optimized", 
                                 font=("Arial", 10))
        subtitle_label.pack(pady=(0, 20))
        
        # Folder selection
        folder_frame = ttk.LabelFrame(main_frame, text="üìÅ Ch·ªçn th∆∞ m·ª•c video", padding="10")
        folder_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 15))
        
        ttk.Label(folder_frame, text="Th∆∞ m·ª•c ch·ª©a video:").grid(row=0, column=0, sticky=tk.W)
        
        folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_path, width=50)
        folder_entry.grid(row=1, column=0, sticky=(tk.W, tk.E), padx=(0, 10))
        
        browse_btn = ttk.Button(folder_frame, text="Duy·ªát...", command=self.browse_folder)
        browse_btn.grid(row=1, column=1)
        
        # Settings frame
        settings_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è C√†i ƒë·∫∑t", padding="10")
        settings_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 15))
        
        # Language selection
        ttk.Label(settings_frame, text="Ng√¥n ng·ªØ ƒë·∫ßu ra:").grid(row=0, column=0, sticky=tk.W, pady=5)
        lang_combo = ttk.Combobox(settings_frame, textvariable=self.selected_lang, 
                                 values=["vi", "en", "auto"], state="readonly", width=15)
        lang_combo.grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        
        # Model selection
        ttk.Label(settings_frame, text="K√≠ch th∆∞·ªõc model:").grid(row=1, column=0, sticky=tk.W, pady=5)
        model_combo = ttk.Combobox(settings_frame, textvariable=self.selected_model,
                                  values=["tiny", "base", "small", "medium", "large", "auto"], 
                                  state="readonly", width=15)
        model_combo.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        
        # Workers selection
        ttk.Label(settings_frame, text="S·ªë lu·ªìng x·ª≠ l√Ω:").grid(row=2, column=0, sticky=tk.W, pady=5)
        workers_spin = ttk.Spinbox(settings_frame, from_=1, to=4, textvariable=self.workers_count, width=15)
        workers_spin.grid(row=2, column=1, sticky=tk.W, padx=(10, 0), pady=5)
        
        # Model info
        model_info = ttk.Label(settings_frame, text="üí° Khuy·∫øn ngh·ªã: medium cho M2 16GB RAM", 
                              font=("Arial", 9), foreground="blue")
        model_info.grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=(10, 0))
        
        # Quick actions
        quick_frame = ttk.LabelFrame(main_frame, text="‚ö° Quick Actions", padding="10")
        quick_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 15))
        
        # Test button
        test_btn = ttk.Button(quick_frame, text="üß™ Test System", command=self.test_system)
        test_btn.grid(row=0, column=0, padx=(0, 10))
        
        # Clear log button
        clear_btn = ttk.Button(quick_frame, text="üóëÔ∏è Clear Log", command=self.clear_log)
        clear_btn.grid(row=0, column=1, padx=(0, 10))
        
        # Open folder button
        open_btn = ttk.Button(quick_frame, text="üìÅ Open Folder", command=self.open_folder)
        open_btn.grid(row=0, column=2)
        
        # Buttons frame
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=5, column=0, columnspan=2, pady=20)
        
        self.start_button = ttk.Button(button_frame, text="üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω", 
                                      command=self.start_processing, style="Accent.TButton")
        self.start_button.grid(row=0, column=0, padx=(0, 10))
        
        self.stop_button = ttk.Button(button_frame, text="‚èπÔ∏è D·ª´ng", 
                                     command=self.stop_processing, state="disabled")
        self.stop_button.grid(row=0, column=1, padx=(0, 10))
        
        exit_btn = ttk.Button(button_frame, text="‚ùå Tho√°t", command=self.root.quit)
        exit_btn.grid(row=0, column=2)
        
        # Progress frame
        self.progress_frame = ttk.LabelFrame(main_frame, text="üìä Ti·∫øn ƒë·ªô", padding="10")
        self.progress_frame.grid(row=6, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 15))
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(self.progress_frame, variable=self.progress_var, 
                                           maximum=100, length=400)
        self.progress_bar.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        self.status_label = ttk.Label(self.progress_frame, text="S·∫µn s√†ng")
        self.status_label.grid(row=1, column=0, sticky=tk.W)
        
        # Log frame
        log_frame = ttk.LabelFrame(main_frame, text="üìù Log", padding="10")
        log_frame.grid(row=7, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 15))
        
        self.log_text = tk.Text(log_frame, height=8, width=70)
        scrollbar = ttk.Scrollbar(log_frame, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(7, weight=1)
        folder_frame.columnconfigure(0, weight=1)
        settings_frame.columnconfigure(0, weight=1)
        quick_frame.columnconfigure(0, weight=1)
        self.progress_frame.columnconfigure(0, weight=1)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
    def browse_folder(self):
        """M·ªü dialog ch·ªçn th∆∞ m·ª•c"""
        folder = filedialog.askdirectory(
            title="üé¨ Ch·ªçn th∆∞ m·ª•c ch·ª©a video",
            initialdir=os.path.expanduser("~/Desktop")
        )
        if folder:
            self.folder_path.set(folder)
            self.log_message(f"‚úÖ ƒê√£ ch·ªçn th∆∞ m·ª•c: {folder}")
            
            # Ki·ªÉm tra video files
            video_count = self.count_video_files(folder)
            if video_count > 0:
                self.log_message(f"üìÅ T√¨m th·∫•y {video_count} video files")
            else:
                self.log_message("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video files trong th∆∞ m·ª•c")
    
    def count_video_files(self, folder_path):
        """ƒê·∫øm s·ªë video files trong th∆∞ m·ª•c"""
        video_extensions = {'.mp4', '.mov', '.mkv', '.avi', '.flv', '.m4v', '.webm'}
        count = 0
        try:
            for file in os.listdir(folder_path):
                if Path(file).suffix.lower() in video_extensions:
                    count += 1
        except Exception:
            pass
        return count
    
    def log_message(self, message):
        """Th√™m message v√†o log"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def update_progress(self, value, status):
        """C·∫≠p nh·∫≠t progress bar"""
        self.progress_var.set(value)
        self.status_label.config(text=status)
        self.root.update_idletasks()
    
    def validate_inputs(self):
        """Ki·ªÉm tra input"""
        if not self.folder_path.get():
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ch·ª©a video!")
            return False
        
        if not os.path.isdir(self.folder_path.get()):
            messagebox.showerror("L·ªói", "Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!")
            return False
        
        video_count = self.count_video_files(self.folder_path.get())
        if video_count == 0:
            result = messagebox.askyesno("C·∫£nh b√°o", 
                                       "Kh√¥ng t√¨m th·∫•y video files trong th∆∞ m·ª•c.\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?")
            if not result:
                return False
        
        return True
    
    def start_processing(self):
        """B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video"""
        if not self.validate_inputs():
            return
        
        # Disable start button v√† enable stop button
        self.start_button.config(state="disabled")
        self.stop_button.config(state="normal")
        
        # Start processing in separate thread
        self.processing_thread = threading.Thread(target=self.process_videos)
        self.processing_thread.daemon = True
        self.processing_thread.start()
    
    def stop_processing(self):
        """D·ª´ng x·ª≠ l√Ω video"""
        if hasattr(self, 'process') and self.process:
            self.process.terminate()
            self.log_message("‚èπÔ∏è  ƒê√£ d·ª´ng x·ª≠ l√Ω")
        
        # Re-enable start button v√† disable stop button
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
    
    def process_videos(self):
        """X·ª≠ l√Ω video trong thread ri√™ng"""
        try:
            self.log_message("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video...")
            self.update_progress(10, "ƒêang kh·ªüi t·∫°o...")
            
            # Build command
            cmd = [
                "python3", "subedit_optimized.py",
                self.folder_path.get(),
                "--lang", self.selected_lang.get(),
                "--model", self.selected_model.get(),
                "--workers", str(self.workers_count.get())
            ]
            
            self.log_message(f"üîß L·ªánh: {' '.join(cmd)}")
            self.update_progress(20, "ƒêang ch·∫°y l·ªánh...")
            
            # Run subprocess
            self.process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            # Monitor output
            progress = 20
            for line in self.process.stdout:
                line = line.strip()
                if line:
                    self.log_message(line)
                    
                    # Update progress based on output
                    if "ƒêang x·ª≠ l√Ω" in line:
                        progress = min(progress + 10, 90)
                        self.update_progress(progress, "ƒêang x·ª≠ l√Ω video...")
                    elif "Ho√†n th√†nh" in line:
                        progress = min(progress + 5, 95)
                        self.update_progress(progress, "Ho√†n th√†nh video...")
            
            self.process.wait()
            
            if self.process.returncode == 0:
                self.update_progress(100, "‚úÖ Ho√†n th√†nh!")
                self.log_message("üéâ X·ª≠ l√Ω video th√†nh c√¥ng!")
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x·ª≠ l√Ω video th√†nh c√¥ng!")
            else:
                self.update_progress(100, "‚ùå L·ªói!")
                self.log_message("‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω")
                messagebox.showerror("L·ªói", "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω video!")
                
        except Exception as e:
            self.log_message(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
        finally:
            # Re-enable start button v√† disable stop button
            self.start_button.config(state="normal")
            self.stop_button.config(state="disabled")
    
    def test_system(self):
        """Test h·ªá th·ªëng"""
        self.log_message("üß™ Testing system...")
        
        # Test trong thread ri√™ng
        def test_thread():
            try:
                import subprocess
                result = subprocess.run([sys.executable, "check_compatibility.py"], 
                                      capture_output=True, text=True, timeout=60)
                
                if result.returncode == 0:
                    self.log_message("‚úÖ System test passed")
                else:
                    self.log_message("‚ùå System test failed")
                    self.log_message(result.stderr)
                    
            except Exception as e:
                self.log_message(f"‚ùå Test error: {e}")
        
        thread = threading.Thread(target=test_thread)
        thread.daemon = True
        thread.start()
    
    def clear_log(self):
        """X√≥a log"""
        self.log_text.delete(1.0, tk.END)
        self.log_message("üóëÔ∏è Log cleared")
    
    def open_folder(self):
        """M·ªü th∆∞ m·ª•c ƒë√£ ch·ªçn"""
        folder = self.folder_path.get()
        if folder and os.path.isdir(folder):
            try:
                import subprocess
                subprocess.run(["open", folder])  # macOS
                self.log_message(f"üìÅ Opened folder: {folder}")
            except Exception as e:
                self.log_message(f"‚ùå Error opening folder: {e}")
        else:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c tr∆∞·ªõc!")
    
    def run(self):
        """Ch·∫°y GUI"""
        self.root.mainloop()

def main():
    """Main function"""
    try:
        app = SubtitleGeneratorGUI()
        app.run()
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông GUI: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
