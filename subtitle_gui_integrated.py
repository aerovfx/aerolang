#!/usr/bin/env python3
"""
üé¨ Video Subtitle Generator - Integrated GUI
GUI t√≠ch h·ª£p tr·ª±c ti·∫øp v·ªõi Whisper ƒë·ªÉ t·∫°o .srt v√† .txt
"""

import os
import sys
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
import subprocess
from pathlib import Path
import whisper
import torch
import gc
import time

class IntegratedSubtitleGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üé¨ Video Subtitle Generator - Integrated")
        self.root.geometry("700x600")
        self.root.resizable(True, True)
        
        # Bi·∫øn l∆∞u tr·ªØ
        self.folder_path = tk.StringVar()
        self.selected_lang = tk.StringVar(value="vi")
        self.selected_model = tk.StringVar(value="medium")
        self.workers_count = tk.IntVar(value=2)
        
        # Kh·ªüi t·∫°o Whisper model
        self.model = None
        self.device = None
        
        self.setup_ui()
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        # Main frame
        main_frame = tk.Frame(self.root, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = tk.Label(main_frame, text="üé¨ Video Subtitle Generator", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 10))
        
        subtitle_label = tk.Label(main_frame, text="Integrated with Whisper", 
                                 font=("Arial", 10))
        subtitle_label.pack(pady=(0, 20))
        
        # Folder selection
        folder_frame = tk.LabelFrame(main_frame, text="üìÅ Ch·ªçn th∆∞ m·ª•c video", padx=10, pady=10)
        folder_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(folder_frame, text="Th∆∞ m·ª•c ch·ª©a video:").pack(anchor=tk.W)
        
        # Entry v√† button trong frame
        entry_frame = tk.Frame(folder_frame)
        entry_frame.pack(fill=tk.X, pady=(5, 0))
        
        folder_entry = tk.Entry(entry_frame, textvariable=self.folder_path, width=50)
        folder_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        browse_btn = tk.Button(entry_frame, text="Duy·ªát...", command=self.browse_folder)
        browse_btn.pack(side=tk.RIGHT)
        
        # Settings frame
        settings_frame = tk.LabelFrame(main_frame, text="‚öôÔ∏è C√†i ƒë·∫∑t", padx=10, pady=10)
        settings_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Language selection
        lang_frame = tk.Frame(settings_frame)
        lang_frame.pack(fill=tk.X, pady=5)
        tk.Label(lang_frame, text="Ng√¥n ng·ªØ ƒë·∫ßu ra:", width=15).pack(side=tk.LEFT)
        lang_combo = ttk.Combobox(lang_frame, textvariable=self.selected_lang, 
                                 values=["vi", "en", "auto"], state="readonly", width=15)
        lang_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Model selection
        model_frame = tk.Frame(settings_frame)
        model_frame.pack(fill=tk.X, pady=5)
        tk.Label(model_frame, text="K√≠ch th∆∞·ªõc model:", width=15).pack(side=tk.LEFT)
        model_combo = ttk.Combobox(model_frame, textvariable=self.selected_model,
                                  values=["tiny", "base", "small", "medium", "large"], 
                                  state="readonly", width=15)
        model_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Model info
        model_info = tk.Label(settings_frame, text="üí° Khuy·∫øn ngh·ªã: medium cho M2 16GB RAM", 
                             font=("Arial", 9), fg="blue")
        model_info.pack(anchor=tk.W, pady=(10, 0))
        
        # Quick actions
        quick_frame = tk.LabelFrame(main_frame, text="‚ö° Quick Actions", padx=10, pady=10)
        quick_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Load model button
        load_btn = tk.Button(quick_frame, text="üì¶ Load Model", command=self.load_model)
        load_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Test button
        test_btn = tk.Button(quick_frame, text="üß™ Test System", command=self.test_system)
        test_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Clear log button
        clear_btn = tk.Button(quick_frame, text="üóëÔ∏è Clear Log", command=self.clear_log)
        clear_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Open folder button
        open_btn = tk.Button(quick_frame, text="üìÅ Open Folder", command=self.open_folder)
        open_btn.pack(side=tk.LEFT)
        
        # Buttons frame
        button_frame = tk.Frame(main_frame)
        button_frame.pack(pady=20)
        
        self.start_button = tk.Button(button_frame, text="üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω", 
                                     command=self.start_processing, bg="green", fg="white")
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = tk.Button(button_frame, text="‚èπÔ∏è D·ª´ng", 
                                    command=self.stop_processing, state="disabled")
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        exit_btn = tk.Button(button_frame, text="‚ùå Tho√°t", command=self.root.quit)
        exit_btn.pack(side=tk.LEFT)
        
        # Progress frame
        self.progress_frame = tk.LabelFrame(main_frame, text="üìä Ti·∫øn ƒë·ªô", padx=10, pady=10)
        self.progress_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(self.progress_frame, variable=self.progress_var, 
                                           maximum=100, length=400)
        self.progress_bar.pack(fill=tk.X, pady=(0, 5))
        
        self.status_label = tk.Label(self.progress_frame, text="S·∫µn s√†ng")
        self.status_label.pack(anchor=tk.W)
        
        # Log frame
        log_frame = tk.LabelFrame(main_frame, text="üìù Log", padx=10, pady=10)
        log_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # Log text v·ªõi scrollbar
        log_text_frame = tk.Frame(log_frame)
        log_text_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_text = tk.Text(log_text_frame, height=8, width=70)
        scrollbar = tk.Scrollbar(log_text_frame, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
    def browse_folder(self):
        """M·ªü dialog ch·ªçn th∆∞ m·ª•c"""
        folder = filedialog.askdirectory(
            title="üé¨ Ch·ªçn th∆∞ m·ª•c ch·ª©a video",
            initialdir=os.path.expanduser("~/Desktop")
        )
        if folder:
            self.folder_path.set(folder)
            self.log_message(f"‚úÖ ƒê√£ ch·ªçn th∆∞ m·ª•c: {folder}")
            
            # Ki·ªÉm tra video files
            video_count = self.count_video_files(folder)
            if video_count > 0:
                self.log_message(f"üìÅ T√¨m th·∫•y {video_count} video files")
            else:
                self.log_message("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video files trong th∆∞ m·ª•c")
    
    def count_video_files(self, folder_path):
        """ƒê·∫øm s·ªë video files trong th∆∞ m·ª•c"""
        video_extensions = {'.mp4', '.mov', '.mkv', '.avi', '.flv', '.m4v', '.webm'}
        count = 0
        try:
            for file in os.listdir(folder_path):
                if Path(file).suffix.lower() in video_extensions:
                    count += 1
        except Exception:
            pass
        return count
    
    def log_message(self, message):
        """Th√™m message v√†o log"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def update_progress(self, value, status):
        """C·∫≠p nh·∫≠t progress bar"""
        self.progress_var.set(value)
        self.status_label.config(text=status)
        self.root.update_idletasks()
    
    def load_model(self):
        """Load Whisper model"""
        self.log_message("üì¶ Loading Whisper model...")
        
        def load_thread():
            try:
                # Setup device
                if torch.backends.mps.is_available():
                    self.device = "mps"
                    self.log_message("üíª S·ª≠ d·ª•ng MPS (Apple Silicon)")
                elif torch.cuda.is_available():
                    self.device = "cuda"
                    self.log_message("üíª S·ª≠ d·ª•ng CUDA")
                else:
                    self.device = "cpu"
                    self.log_message("üíª S·ª≠ d·ª•ng CPU")
                
                # Load model
                model_size = self.selected_model.get()
                self.log_message(f"üì¶ Loading model {model_size}...")
                
                self.model = whisper.load_model(model_size, device=self.device)
                self.log_message(f"‚úÖ Model {model_size} loaded successfully")
                
            except Exception as e:
                self.log_message(f"‚ùå Error loading model: {e}")
        
        thread = threading.Thread(target=load_thread)
        thread.daemon = True
        thread.start()
    
    def format_timestamp(self, seconds):
        """Format timestamp cho SRT"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        millis = int((seconds - int(seconds)) * 1000)
        return f"{hours:02}:{minutes:02}:{secs:02},{millis:03}"
    
    def transcribe_video(self, video_path, output_txt_path, output_srt_path, target_lang="vi"):
        """Transcribe video v√† t·∫°o file .srt v√† .txt"""
        try:
            self.log_message(f"üé¨ ƒêang x·ª≠ l√Ω: {Path(video_path).name}")
            
            # Transcribe
            if target_lang == "en":
                result = self.model.transcribe(
                    video_path, 
                    task="translate",
                    fp16=False,
                    verbose=False
                )
            else:
                result = self.model.transcribe(
                    video_path, 
                    language=target_lang,
                    fp16=False,
                    verbose=False
                )
            
            # L∆∞u file TXT
            with open(output_txt_path, "w", encoding="utf-8") as f:
                f.write(result["text"])
            self.log_message(f"üìÑ ƒê√£ l∆∞u: {output_txt_path}")
            
            # L∆∞u file SRT
            if "segments" in result:
                with open(output_srt_path, "w", encoding="utf-8") as srt_file:
                    for i, seg in enumerate(result["segments"], 1):
                        start = self.format_timestamp(seg["start"])
                        end = self.format_timestamp(seg["end"])
                        text = seg["text"].strip()
                        srt_file.write(f"{i}\n{start} --> {end}\n{text}\n\n")
                self.log_message(f"üé¨ ƒê√£ l∆∞u ph·ª• ƒë·ªÅ: {output_srt_path}")
            
            # Cleanup memory
            if self.device == "mps":
                try:
                    if hasattr(torch.backends.mps, 'empty_cache'):
                        torch.backends.mps.empty_cache()
                except Exception as e:
                    self.log_message(f"‚ö†Ô∏è MPS cache cleanup error: {e}")
            elif self.device == "cuda":
                torch.cuda.empty_cache()
            
            gc.collect()
            
            self.log_message(f"‚úÖ Ho√†n th√†nh: {Path(video_path).name}")
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå L·ªói khi x·ª≠ l√Ω {Path(video_path).name}: {str(e)}")
            return False
    
    def validate_inputs(self):
        """Ki·ªÉm tra input"""
        if not self.folder_path.get():
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ch·ª©a video!")
            return False
        
        if not os.path.isdir(self.folder_path.get()):
            messagebox.showerror("L·ªói", "Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!")
            return False
        
        if not self.model:
            messagebox.showerror("L·ªói", "Vui l√≤ng load model tr∆∞·ªõc!")
            return False
        
        video_count = self.count_video_files(self.folder_path.get())
        if video_count == 0:
            result = messagebox.askyesno("C·∫£nh b√°o", 
                                       "Kh√¥ng t√¨m th·∫•y video files trong th∆∞ m·ª•c.\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?")
            if not result:
                return False
        
        return True
    
    def start_processing(self):
        """B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video"""
        if not self.validate_inputs():
            return
        
        # Disable start button v√† enable stop button
        self.start_button.config(state="disabled")
        self.stop_button.config(state="normal")
        
        # Start processing in separate thread
        self.processing_thread = threading.Thread(target=self.process_videos)
        self.processing_thread.daemon = True
        self.processing_thread.start()
    
    def stop_processing(self):
        """D·ª´ng x·ª≠ l√Ω video"""
        self.log_message("‚èπÔ∏è ƒê√£ d·ª´ng x·ª≠ l√Ω")
        
        # Re-enable start button v√† disable stop button
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
    
    def process_videos(self):
        """X·ª≠ l√Ω video trong thread ri√™ng"""
        try:
            self.log_message("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video...")
            self.update_progress(10, "ƒêang kh·ªüi t·∫°o...")
            
            folder_path = self.folder_path.get()
            target_lang = self.selected_lang.get()
            
            # T√¨m video files
            video_extensions = {'.mp4', '.mov', '.mkv', '.avi', '.flv', '.m4v', '.webm'}
            video_files = []
            
            for file in os.listdir(folder_path):
                if Path(file).suffix.lower() in video_extensions:
                    video_files.append(file)
            
            total_files = len(video_files)
            self.log_message(f"üìÅ T√¨m th·∫•y {total_files} video files")
            
            if total_files == 0:
                self.log_message("‚ùå Kh√¥ng c√≥ video files ƒë·ªÉ x·ª≠ l√Ω")
                return
            
            # X·ª≠ l√Ω t·ª´ng video
            for i, filename in enumerate(video_files, 1):
                video_path = os.path.join(folder_path, filename)
                base = os.path.splitext(video_path)[0]
                txt_path = base + "_translated.txt"
                srt_path = base + "_translated.srt"
                
                self.log_message(f"üé¨ X·ª≠ l√Ω {i}/{total_files}: {filename}")
                self.update_progress(10 + (i / total_files) * 80, f"ƒêang x·ª≠ l√Ω {filename}...")
                
                success = self.transcribe_video(video_path, txt_path, srt_path, target_lang)
                
                if success:
                    self.log_message(f"‚úÖ Ho√†n th√†nh {i}/{total_files}")
                else:
                    self.log_message(f"‚ùå L·ªói {i}/{total_files}")
                
                # Update progress
                progress = 10 + (i / total_files) * 80
                self.update_progress(progress, f"Ho√†n th√†nh {i}/{total_files}")
            
            self.update_progress(100, "‚úÖ Ho√†n th√†nh t·∫•t c·∫£!")
            self.log_message("üéâ X·ª≠ l√Ω video th√†nh c√¥ng!")
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x·ª≠ l√Ω {total_files} video files!")
                
        except Exception as e:
            self.log_message(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
        finally:
            # Re-enable start button v√† disable stop button
            self.start_button.config(state="normal")
            self.stop_button.config(state="disabled")
    
    def test_system(self):
        """Test h·ªá th·ªëng"""
        self.log_message("üß™ Testing system...")
        
        def test_thread():
            try:
                import subprocess
                result = subprocess.run([sys.executable, "check_compatibility.py"], 
                                      capture_output=True, text=True, timeout=60)
                
                if result.returncode == 0:
                    self.log_message("‚úÖ System test passed")
                else:
                    self.log_message("‚ùå System test failed")
                    self.log_message(result.stderr)
                    
            except Exception as e:
                self.log_message(f"‚ùå Test error: {e}")
        
        thread = threading.Thread(target=test_thread)
        thread.daemon = True
        thread.start()
    
    def clear_log(self):
        """X√≥a log"""
        self.log_text.delete(1.0, tk.END)
        self.log_message("üóëÔ∏è Log cleared")
    
    def open_folder(self):
        """M·ªü th∆∞ m·ª•c ƒë√£ ch·ªçn"""
        folder = self.folder_path.get()
        if folder and os.path.isdir(folder):
            try:
                import subprocess
                subprocess.run(["open", folder])  # macOS
                self.log_message(f"üìÅ Opened folder: {folder}")
            except Exception as e:
                self.log_message(f"‚ùå Error opening folder: {e}")
        else:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c tr∆∞·ªõc!")
    
    def run(self):
        """Ch·∫°y GUI"""
        self.root.mainloop()

def main():
    """Main function"""
    try:
        app = IntegratedSubtitleGUI()
        app.run()
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông GUI: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()










