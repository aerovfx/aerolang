#!/usr/bin/env python3
"""
üîß Fix MPS Script
S·ª≠a l·ªói MPS v√† c√†i ƒë·∫∑t l·∫°i PyTorch cho Apple Silicon M2
"""

import os
import sys
import subprocess
import platform

def check_system():
    """Ki·ªÉm tra h·ªá th·ªëng"""
    print("üíª Ki·ªÉm tra h·ªá th·ªëng...")
    
    system = platform.system()
    machine = platform.machine()
    
    print(f"   OS: {system}")
    print(f"   Architecture: {machine}")
    
    if system == "Darwin" and machine == "arm64":
        print("   ‚úÖ MacBook v·ªõi Apple Silicon detected")
        return True
    else:
        print("   ‚ö†Ô∏è  Kh√¥ng ph·∫£i MacBook Apple Silicon")
        return False

def uninstall_torch():
    """G·ª° c√†i ƒë·∫∑t PyTorch hi·ªán t·∫°i"""
    print("\nüóëÔ∏è  G·ª° c√†i ƒë·∫∑t PyTorch hi·ªán t·∫°i...")
    
    try:
        subprocess.run([sys.executable, "-m", "pip", "uninstall", "torch", "torchaudio", "-y"], 
                      check=True, capture_output=True)
        print("   ‚úÖ ƒê√£ g·ª° c√†i ƒë·∫∑t PyTorch")
    except subprocess.CalledProcessError as e:
        print(f"   ‚ö†Ô∏è  L·ªói g·ª° c√†i ƒë·∫∑t: {e}")

def install_torch_mps():
    """C√†i ƒë·∫∑t PyTorch v·ªõi MPS support"""
    print("\nüî• C√†i ƒë·∫∑t PyTorch v·ªõi MPS support...")
    
    try:
        # C√†i ƒë·∫∑t nightly build cho MPS support t·ªët nh·∫•t
        cmd = [
            sys.executable, "-m", "pip", "install", 
            "--pre", "torch", "torchaudio", 
            "--index-url", "https://download.pytorch.org/whl/nightly/cpu"
        ]
        
        print(f"   Ch·∫°y: {' '.join(cmd)}")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("   ‚úÖ C√†i ƒë·∫∑t PyTorch th√†nh c√¥ng")
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå L·ªói c√†i ƒë·∫∑t: {e}")
        print(f"   Error output: {e.stderr}")
        return False

def test_mps():
    """Test MPS functionality"""
    print("\nüß™ Test MPS functionality...")
    
    try:
        import torch
        
        # Test MPS availability
        mps_available = torch.backends.mps.is_available()
        print(f"   MPS available: {mps_available}")
        
        if mps_available:
            # Test device creation
            device = torch.device("mps")
            print(f"   MPS device: {device}")
            
            # Test tensor creation
            test_tensor = torch.tensor([1, 2, 3], device=device)
            print(f"   ‚úÖ MPS tensor: {test_tensor}")
            
            # Test empty_cache
            if hasattr(torch.backends.mps, 'empty_cache'):
                torch.backends.mps.empty_cache()
                print("   ‚úÖ MPS empty_cache working")
            else:
                print("   ‚ö†Ô∏è  MPS empty_cache not available")
            
            return True
        else:
            print("   ‚ùå MPS not available")
            return False
            
    except Exception as e:
        print(f"   ‚ùå MPS test error: {e}")
        return False

def set_environment_variables():
    """Thi·∫øt l·∫≠p environment variables"""
    print("\nüîß Thi·∫øt l·∫≠p environment variables...")
    
    # Suppress Tk deprecation warning
    os.environ['TK_SILENCE_DEPRECATION'] = '1'
    print("   ‚úÖ Set TK_SILENCE_DEPRECATION=1")
    
    # PyTorch environment variables
    os.environ['PYTORCH_ENABLE_MPS_FALLBACK'] = '1'
    print("   ‚úÖ Set PYTORCH_ENABLE_MPS_FALLBACK=1")

def create_fix_script():
    """T·∫°o script fix t·ª± ƒë·ªông"""
    print("\nüìù T·∫°o script fix t·ª± ƒë·ªông...")
    
    script_content = '''#!/bin/bash
# Auto-fix script for MPS issues

export TK_SILENCE_DEPRECATION=1
export PYTORCH_ENABLE_MPS_FALLBACK=1

echo "üîß Running auto-fix for MPS..."
python3 fix_mps.py

echo "‚úÖ Fix completed!"
'''
    
    with open("auto_fix.sh", "w") as f:
        f.write(script_content)
    
    os.chmod("auto_fix.sh", 0o755)
    print("   ‚úÖ Created auto_fix.sh")

def main():
    """Main function"""
    print("üîß MPS Fix Script for MacBook Pro M2")
    print("=" * 50)
    
    # Ki·ªÉm tra h·ªá th·ªëng
    if not check_system():
        print("\n‚ùå Script n√†y ch·ªâ d√†nh cho MacBook Apple Silicon")
        return
    
    # Thi·∫øt l·∫≠p environment variables
    set_environment_variables()
    
    # G·ª° c√†i ƒë·∫∑t PyTorch c≈©
    uninstall_torch()
    
    # C√†i ƒë·∫∑t PyTorch m·ªõi
    if not install_torch_mps():
        print("\n‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t PyTorch")
        return
    
    # Test MPS
    if test_mps():
        print("\nüéâ MPS fix th√†nh c√¥ng!")
        print("üí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y Video Subtitle Generator")
    else:
        print("\n‚ö†Ô∏è  MPS v·∫´n c√≥ v·∫•n ƒë·ªÅ, th·ª≠ c√†i ƒë·∫∑t l·∫°i...")
        
        # Th·ª≠ c√†i ƒë·∫∑t stable version
        print("\nüîÑ Th·ª≠ c√†i ƒë·∫∑t stable version...")
        try:
            subprocess.run([
                sys.executable, "-m", "pip", "install", 
                "torch", "torchaudio", 
                "--index-url", "https://download.pytorch.org/whl/cpu"
            ], check=True)
            
            if test_mps():
                print("\n‚úÖ MPS working v·ªõi stable version")
            else:
                print("\n‚ùå MPS v·∫´n kh√¥ng ho·∫°t ƒë·ªông")
        except Exception as e:
            print(f"\n‚ùå L·ªói c√†i ƒë·∫∑t stable version: {e}")
    
    # T·∫°o script fix t·ª± ƒë·ªông
    create_fix_script()
    
    print("\nüìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
    print("1. Ch·∫°y: python3 check_compatibility.py")
    print("2. Ch·∫°y: python3 subedit_optimized.py --gui")
    print("3. Ho·∫∑c: ./auto_fix.sh")

if __name__ == "__main__":
    main()




